Link to the repository - https://github.com/periph

Periph is a standalone hardware library with limited external dependencies.

periph provides interfaces to assemble components to communicate with hardware peripherals. It is designed to be composable.
As such, it splits boards into their individual components: CPU, buses, physical headers, etc, instead of representing each board as a whole object.

Features - 

Optimize for simplicity, correctness and usability in that order.
e.g. everything, interfaces and structs, uses strict typing, there’s no interface{} in sight.

OS agnostic. Clear separation of interfaces in conn, enablers in host and device drivers in devices.
e.g. no devfs or sysfs path in sight.
e.g. conditional compilation enables only the relevant drivers to be loaded on each platform.

… yet doesn’t get in the way of platform specific code.
e.g. A user can use statically typed global variables rpi.P1_3, bcm283x.GPIO2 to refer to the exact same pin on a Raspberry Pi.

The user can chose to optimize for performance instead of usability.
e.g. apa102.Dev exposes both high level draw.Image to draw an image and low level io.Writer to write raw RGB 24 bits pixels. The user chooses.

Use a divide and conquer approach. Each component has exactly one responsibility.
e.g. instead of having a driver per “platform”, there’s a driver per “component”: one for the CPU, one for the board headers, one for each bus and sensor, etc.

Extensible via a driver registry.
e.g. a user can inject a custom driver to expose more pins, headers, etc. A USB device (like an FT232H) can expose headers in addition to the headers found on the board.

The drivers must use the fastest possible implementation.
e.g. both allwinner and bcm283x leverage sysfs gpio to expose interrupt driven edge detection, yet use memory mapped GPIO registers to perform single-cycle reads and writes.

Supported platforms - https://periph.io/platform/
Supported devices - https://periph.io/device/
